stages:
- test
- review
- build
- packing
- release
- deploy

variables:
  CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE:$CI_BUILD_REF_NAME
  CONTAINER_RELEASE_IMAGE: $CI_REGISTRY_IMAGE:latest

test:
  stage: test
  image: node:latest
  cache:
    paths:
    - node_modules/
  script:
  - npm install
  - npm test

sonarqube-publish:
  stage: review
  image: registry.in2.es:5005/in2/sonar-scanner-nodejs:2.0.3
  cache:
    paths:
    - node_modules/
  dependencies:
  variables:
    SONAR_URL: "$SONAR_URL"
    SONAR_TOKEN: "$SONAR_TOKEN"
    SONAR_GITLAB_COMMENT: "true"
    SONAR_ANALYSIS_MODE: "publish"
    SONAR_SOURCES: "./src"
  script:
  - npm install
  - sonar-scanner-run.sh

build-artifacts:
  stage: build
  image: node:latest
  only:
  - tags
  - master
  - develop
  cache:
    paths:
      - node_modules/
  script:
  - npm install
  - npm run build
  dependencies:
  artifacts:
    paths:
    - dist/

build-war:
  stage: packing
  image: java:openjdk-8-alpine
  only:
    - tags
    - master
    - develop
  script:
    - cp -r WEB-INF dist/WEB-INF
    - cd dist
    - cp index.html index.jsp
    - jar -cvf ds-diba-frontend.war *
  dependencies:
    - build-artifacts
  artifacts:
    paths:
      - dist/ds-diba-frontend.war

build-docker-image:
  stage: packing
  image: docker:git
  only:
  - tags
  - master
  - develop
  services:
  - docker:dind
  tags:
  - docker
  dependencies:
  - build-artifacts
  before_script:
  - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
  script:
  - docker build -t $CONTAINER_TEST_IMAGE .
  - docker push $CONTAINER_TEST_IMAGE

release-image:
  stage: release
  image: docker:git
  only:
  - tags
  - master
  services:
  - docker:dind
  tags:
  - docker
  dependencies:
  before_script:
  - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
  script:
  - docker pull $CONTAINER_TEST_IMAGE
  - docker tag $CONTAINER_TEST_IMAGE $CONTAINER_RELEASE_IMAGE
  - docker push $CONTAINER_RELEASE_IMAGE

## DEV
deploy-docker:dev:
  stage: deploy
  image: kinogmt/centos-ssh
  environment:
    name: develop
    url: http://dsdiba.demo.in2.es
  only:
  - develop
  when: manual
  variables:
    DOCKER_FILE: 'docker-compose-dev.yml'
    DEPLOYMENT_KEY: $DEPLOYMENT_DEV_KEY
    DEPLOYMENT_SERVER: $DEPLOYMENT_DEV_SERVER
    DEPLOYMENT_USER: $DEPLOYMENT_DEV_USER
    DEPLOYMENT_PATH: $DEPLOYMENT_DEV_PATH
  dependencies:
  before_script:
  - mkdir -p ~/.ssh
  - echo "$DEPLOYMENT_KEY" | tr -d '\r' > ~/.ssh/id_rsa
  - chmod 600 ~/.ssh/id_rsa
  - eval "$(ssh-agent -s)"
  - ssh-add ~/.ssh/id_rsa
  - ssh-keyscan -H $DEPLOYMENT_SERVER >> ~/.ssh/known_hosts
  script:
  - scp -r ./${DOCKER_FILE} ${DEPLOYMENT_USER}@${DEPLOYMENT_SERVER}:${DEPLOYMENT_PATH}/
  - ssh ${DEPLOYMENT_USER}@${DEPLOYMENT_SERVER} "cd ${DEPLOYMENT_PATH}; docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}; docker-compose -f ${DOCKER_FILE} stop; docker-compose -f ${DOCKER_FILE} rm app --force; docker-compose -f ${DOCKER_FILE} pull; docker-compose -f ${DOCKER_FILE} up -d"

deploy-weblogic:dev:
  stage: deploy
  image: kinogmt/centos-ssh
  environment:
    name: develop
    url: http://dsdiba.demo.in2.es
  only:
  - develop
  variables:
    WAR_FILE: 'ds-diba-frontend.war'
    WAR_FOLDER: '/home/weblogic/war'
    DEPLOYMENT_KEY: $DEPLOYMENT_DEV_KEY
    DEPLOYMENT_SERVER: $DEPLOYMENT_DEV_SERVER
    DEPLOYMENT_USER: $DEPLOYMENT_DEV_USER
    DEPLOYMENT_PATH: $DEPLOYMENT_DEV_PATH
  dependencies:
    - buid-war
  before_script:
  - mkdir -p ~/.ssh
  - echo "$DEPLOYMENT_KEY" | tr -d '\r' > ~/.ssh/id_rsa
  - chmod 600 ~/.ssh/id_rsa
  - eval "$(ssh-agent -s)"
  - ssh-add ~/.ssh/id_rsa
  - ssh-keyscan -H $DEPLOYMENT_SERVER >> ~/.ssh/known_hosts
  script:
  - scp -r ./${WAR_FILE} ${DEPLOYMENT_USER}@${DEPLOYMENT_SERVER}:${DEPLOYMENT_PATH}/
  - ssh ${DEPLOYMENT_USER}@${DEPLOYMENT_SERVER} "/home/weblogic/redeployFront.sh"

## PROD
#deploy:prod:
#  stage: deploy
#  image: kinogmt/centos-ssh
#  environment:
#    name: prod
#    url: https://prod.url.com
#  only:
#  - master
#  variables:
#    DOCKER_FILE: 'docker-compose.yml'
#    DEPLOYMENT_KEY: $DEPLOYMENT_PROD_KEY
#    DEPLOYMENT_SERVER: $DEPLOYMENT_PROD_SERVER
#    DEPLOYMENT_USER: $DEPLOYMENT_PROD_USER
#    DEPLOYMENT_PATH: $DEPLOYMENT_PROD_PATH
#  dependencies:
#  before_script:
#  - mkdir -p ~/.ssh
#  - echo "$DEPLOYMENT_KEY" | tr -d '\r' > ~/.ssh/id_rsa
#  - chmod 600 ~/.ssh/id_rsa
#  - eval "$(ssh-agent -s)"
#  - ssh-add ~/.ssh/id_rsa
#  - ssh-keyscan -H $DEPLOYMENT_SERVER >> ~/.ssh/known_hosts
#  script:
#  - scp -r ./environment.js ${DEPLOYMENT_USER}@${DEPLOYMENT_SERVER}:${DEPLOYMENT_PATH}/
#  - scp -r ./${DOCKER_FILE} ${DEPLOYMENT_USER}@${DEPLOYMENT_SERVER}:${DEPLOYMENT_PATH}/
#  - ssh ${DEPLOYMENT_USER}@${DEPLOYMENT_SERVER} "cd ${DEPLOYMENT_PATH}; docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}; docker-compose -f ${DOCKER_FILE} stop; docker-compose -f ${DOCKER_FILE} rm app --force; docker-compose -f ${DOCKER_FILE} pull; docker-compose -f ${DOCKER_FILE} up -d"

# Deploy ith dynamic env file
#deploy:prod:
#  stage: deploy
#  image: kinogmt/centos-ssh
#  environment:
#    name: prod
#    url: https://prod.url.com
#  only:
#  - master
#  variables:
#    DOCKER_FILE: 'docker-compose-with-env.yml'
#    DEPLOYMENT_KEY: $DEPLOYMENT_PROD_KEY
#    DEPLOYMENT_SERVER: $DEPLOYMENT_PROD_SERVER
#    DEPLOYMENT_USER: $DEPLOYMENT_PROD_USER
#    DEPLOYMENT_PATH: $DEPLOYMENT_PROD_PATH
#  dependencies:
#  before_script:
#  - mkdir -p ~/.ssh
#  - echo "$DEPLOYMENT_KEY" | tr -d '\r' > ~/.ssh/id_rsa
#  - chmod 600 ~/.ssh/id_rsa
#  - eval "$(ssh-agent -s)"
#  - ssh-add ~/.ssh/id_rsa
#  - ssh-keyscan -H $DEPLOYMENT_SERVER >> ~/.ssh/known_hosts
#  script:
#  - 'echo "const env = {serverURL: \"http://api-in2code.demo.in2.es/in2rest2/api/v1\"};" > environment.js'
#  - scp -r ./environment.js ${DEPLOYMENT_USER}@${DEPLOYMENT_SERVER}:${DEPLOYMENT_PATH}/
#  - scp -r ./${DOCKER_FILE} ${DEPLOYMENT_USER}@${DEPLOYMENT_SERVER}:${DEPLOYMENT_PATH}/
#  - ssh ${DEPLOYMENT_USER}@${DEPLOYMENT_SERVER} "cd ${DEPLOYMENT_PATH}; docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}; docker-compose -f ${DOCKER_FILE} stop; docker-compose -f ${DOCKER_FILE} rm app --force; docker-compose -f ${DOCKER_FILE} pull; docker-compose -f ${DOCKER_FILE} up -d"
